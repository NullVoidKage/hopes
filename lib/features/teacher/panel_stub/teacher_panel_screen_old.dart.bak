import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../../core/providers.dart';
import '../../../core/theme.dart';
import '../../../data/models/user.dart';
import '../../../data/models/subject.dart';
import '../../../data/models/module.dart';
import '../../../data/models/lesson.dart';
import '../../../data/models/assessment.dart';
import '../../../data/models/points.dart';
import '../../../data/models/badge.dart';

import 'widgets/lesson_editor.dart';
import 'widgets/quiz_editor.dart';
import 'widgets/student_progress_widget.dart';

class TeacherPanelScreen extends ConsumerStatefulWidget {
  const TeacherPanelScreen({super.key});

  @override
  ConsumerState<TeacherPanelScreen> createState() => _TeacherPanelScreenState();
}

class _TeacherPanelScreenState extends ConsumerState<TeacherPanelScreen> 
    with TickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _tabController.addListener(() {
      setState(() {
        // This will rebuild the UI when tab changes
      });
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final authState = ref.watch(currentUserProvider);

    return authState.when(
      loading: () => const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      ),
      error: (error, stack) => Scaffold(
        body: Center(child: Text('Error: $error')),
      ),
      data: (user) {
        if (user == null) {
          return const Scaffold(
            body: Center(child: Text('No user found')),
          );
        }

        return DefaultTabController(
          length: 4,
          child: Scaffold(
            backgroundColor: AppTheme.lightGray,
            body: SafeArea(
              child: Column(
                children: [
                  // Custom Apple-style header
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.fromLTRB(20, 16, 20, 24),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.03),
                          blurRadius: 8,
                          offset: const Offset(0, 1),
                        ),
                      ],
                    ),
                    child: Column(
                      children: [
                        // Title and actions row
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                'Teacher Panel',
                                style: TextStyle(
                                  fontSize: 32,
                                  fontWeight: FontWeight.w800,
                                  color: AppTheme.darkGray,
                                  letterSpacing: -0.8,
                                ),
                              ),
                            ),
                            _buildSyncStatusIcon(ref),
                            const SizedBox(width: 16),
                            _buildMoreOptionsButton(ref),
                          ],
                        ),
                        const SizedBox(height: 32),
                        
                        // Custom Apple-style segmented control
                        Container(
                          padding: const EdgeInsets.all(4),
                          decoration: BoxDecoration(
                            color: AppTheme.lightGray,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Row(
                            children: [
                              _buildSegmentedButton('Subjects', 0, context),
                              _buildSegmentedButton('Lessons', 1, context),
                              _buildSegmentedButton('Quizzes', 2, context),
                              _buildSegmentedButton('Progress', 3, context),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  
                  // Tab content
                  Expanded(
                    child: TabBarView(
                      controller: _tabController,
                      children: [
                        _SubjectsTab(),
                        _LessonsTab(),
                        _QuizzesTab(),
                        const StudentProgressWidget(),
                      ],
                    ),
                  ),
                  
                  // Custom Apple-style action button
                  Padding(
                    padding: const EdgeInsets.all(20),
                    child: _buildAppleStyleActionButton(context, ref),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildMoreOptionsButton(WidgetRef ref) {
    return Builder(
      builder: (context) => Container(
        decoration: BoxDecoration(
          color: AppTheme.lightGray,
          borderRadius: BorderRadius.circular(12),
        ),
        child: PopupMenuButton<String>(
          icon: Icon(
            Icons.more_vert,
            color: AppTheme.darkGray,
            size: 20,
          ),
          onSelected: (value) async {
            if (value == 'switch_role') {
              await ref.read(currentUserProvider.notifier).updateRole(UserRole.student);
              // Force navigation to student dashboard after role update
              if (context.mounted) {
                context.go('/student/dashboard');
              }
            } else if (value == 'sign_out') {
              await ref.read(currentUserProvider.notifier).signOut();
              if (context.mounted) {
                context.go('/');
              }
            }
          },
        itemBuilder: (context) => [
          PopupMenuItem(
            value: 'switch_role',
            child: Row(
              children: [
                Icon(
                  Icons.swap_horiz,
                  color: AppTheme.primaryBlue,
                  size: 18,
                ),
                const SizedBox(width: 12),
                Text(
                  'Switch to Student',
                  style: TextStyle(
                    color: AppTheme.darkGray,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
          PopupMenuItem(
            value: 'sign_out',
            child: Row(
              children: [
                Icon(
                  Icons.logout,
                  color: AppTheme.accentRed,
                  size: 18,
                ),
                const SizedBox(width: 12),
                Text(
                  'Sign Out',
                  style: TextStyle(
                    color: AppTheme.darkGray,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
        ],
        ),
      ),
    );
  }

  Widget _buildSegmentedButton(String text, int index, BuildContext context) {
    final isSelected = _tabController.index == index;
    
    return Expanded(
      child: GestureDetector(
        onTap: () {
          setState(() {
            _tabController.animateTo(index);
          });
        },
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          padding: const EdgeInsets.symmetric(vertical: 12),
          decoration: BoxDecoration(
            color: isSelected ? Colors.white : Colors.transparent,
            borderRadius: BorderRadius.circular(8),
            boxShadow: isSelected ? [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 4,
                offset: const Offset(0, 1),
              ),
            ] : null,
          ),
          child: Text(
            text,
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: 15,
              fontWeight: isSelected ? FontWeight.w600 : FontWeight.w500,
              color: isSelected ? AppTheme.primaryBlue : AppTheme.neutralGray,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildAppleStyleActionButton(BuildContext context, WidgetRef ref) {
    final currentIndex = _tabController.index;
    
    return Container(
      width: double.infinity,
      height: 56,
      decoration: BoxDecoration(
        color: AppTheme.primaryBlue,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: AppTheme.primaryBlue.withOpacity(0.3),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(16),
          onTap: () {
            switch (currentIndex) {
              case 0:
                _showSubjectDialog(context, ref);
                break;
              case 1:
                _showLessonDialog(context, ref);
                break;
              case 2:
                _showQuizDialog(context, ref);
                break;
            }
          },
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  Icons.add,
                  color: Colors.white,
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Text(
                _getActionButtonText(currentIndex),
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 17,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _getActionButtonText(int tabIndex) {
    switch (tabIndex) {
      case 0:
        return 'Add Subject';
      case 1:
        return 'Add Lesson';
      case 2:
        return 'Add Quiz';
      default:
        return 'Add Item';
    }
  }

  Widget _buildSyncStatusIcon(WidgetRef ref) {
    return Consumer(
      builder: (context, ref, child) {
        // For now, show green sync status (simulating online)
        return Container(
          margin: const EdgeInsets.only(right: 8),
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: AppTheme.accentGreen.withOpacity(0.1),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: AppTheme.accentGreen.withOpacity(0.3),
              width: 1,
            ),
          ),
          child: Icon(
            Icons.sync,
            color: AppTheme.accentGreen,
            size: 20,
          ),
        );
      },
    );
  }

  Widget _buildFloatingActionButton(BuildContext context, WidgetRef ref) {
    return Consumer(
      builder: (context, ref, child) {
        final tabController = DefaultTabController.of(context);
        final currentIndex = tabController?.index ?? 0;
        
        switch (currentIndex) {
          case 0: // Subjects
            return FloatingActionButton(
              onPressed: () => _showSubjectDialog(context, ref),
              backgroundColor: AppTheme.primaryBlue,
              foregroundColor: Colors.white,
              elevation: 0,
              child: const Icon(Icons.add, size: 24),
            );
          case 1: // Lessons
            return FloatingActionButton(
              onPressed: () => _showLessonDialog(context, ref),
              backgroundColor: AppTheme.primaryBlue,
              foregroundColor: Colors.white,
              elevation: 0,
              child: const Icon(Icons.add, size: 24),
            );
          case 2: // Quizzes
            return FloatingActionButton(
              onPressed: () => _showQuizDialog(context, ref),
              backgroundColor: AppTheme.primaryBlue,
              foregroundColor: Colors.white,
              elevation: 0,
              child: const Icon(Icons.add, size: 24),
            );
          default:
            return const SizedBox.shrink();
        }
      },
    );
  }

  void _showSubjectDialog(BuildContext context, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Create Subject'),
        content: const Text('Subject creation feature coming soon!'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  void _showLessonDialog(BuildContext context, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Create Lesson'),
        content: const Text('Please select a module first to create a lesson.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  void _showQuizDialog(BuildContext context, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Create Quiz'),
        content: const Text('Please select a lesson first to create a quiz.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
}

class _SubjectsTab extends ConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final contentRepo = ref.watch(contentRepositoryProvider);
    
    return FutureBuilder<List<Subject>>(
      future: contentRepo.getSubjects(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        }

        final subjects = snapshot.data ?? [];
        
        return ListView.builder(
          padding: const EdgeInsets.all(16),
          itemCount: subjects.length,
          itemBuilder: (context, index) {
            final subject = subjects[index];
            return Container(
              margin: const EdgeInsets.only(bottom: 12),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 10,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: ListTile(
                contentPadding: const EdgeInsets.all(16),
                leading: Container(
                  padding: const EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: AppTheme.primaryBlue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Icon(
                    Icons.science,
                    color: AppTheme.primaryBlue,
                    size: 20,
                  ),
                ),
                title: Text(
                  subject.name,
                  style: const TextStyle(
                    fontWeight: FontWeight.w600,
                    color: AppTheme.darkGray,
                  ),
                ),
                subtitle: Text(
                  'Grade ${subject.gradeLevel}',
                  style: TextStyle(
                    color: AppTheme.neutralGray,
                  ),
                ),
                trailing: PopupMenuButton<String>(
                  icon: Icon(
                    Icons.more_vert,
                    color: AppTheme.neutralGray,
                  ),
                  onSelected: (value) {
                    // Handle subject actions
                  },
                  itemBuilder: (context) => [
                    PopupMenuItem(
                      value: 'edit',
                      child: Row(
                        children: [
                          Icon(Icons.edit, color: AppTheme.primaryBlue, size: 18),
                          const SizedBox(width: 8),
                          const Text('Edit'),
                        ],
                      ),
                    ),
                    PopupMenuItem(
                      value: 'delete',
                      child: Row(
                        children: [
                          Icon(Icons.delete, color: AppTheme.accentRed, size: 18),
                          const SizedBox(width: 8),
                          const Text('Delete'),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }
}

class _LessonsTab extends ConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final contentRepo = ref.watch(contentRepositoryProvider);
    
    return FutureBuilder<List<Subject>>(
      future: contentRepo.getSubjects(),
      builder: (context, subjectsSnapshot) {
        if (subjectsSnapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        final subjects = subjectsSnapshot.data ?? [];
        if (subjects.isEmpty) {
          return const Center(child: Text('No subjects available'));
        }

        return FutureBuilder<List<Module>>(
          future: contentRepo.getModulesBySubject(subjects.first.id),
          builder: (context, modulesSnapshot) {
            if (modulesSnapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }

            final modules = modulesSnapshot.data ?? [];
            
            if (modules.isEmpty) {
              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(24),
                      decoration: BoxDecoration(
                        color: AppTheme.lightGray,
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Icon(
                        Icons.article,
                        size: 64,
                        color: AppTheme.neutralGray,
                      ),
                    ),
                    const SizedBox(height: 24),
                    Text(
                      'No lessons available',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.w600,
                        color: AppTheme.darkGray,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Create your first lesson to get started',
                      style: TextStyle(
                        color: AppTheme.neutralGray,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              );
            }
            
            return ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: modules.length,
              itemBuilder: (context, index) {
                final module = modules[index];
                return Container(
                  margin: const EdgeInsets.only(bottom: 16),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.05),
                        blurRadius: 10,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: ExpansionTile(
                    title: Text(
                      module.title,
                      style: const TextStyle(
                        fontWeight: FontWeight.w600,
                        color: AppTheme.darkGray,
                      ),
                    ),
                    subtitle: Text(
                      'Version: ${module.version}',
                      style: TextStyle(
                        color: AppTheme.neutralGray,
                      ),
                    ),
                    children: [
                      FutureBuilder<List<Lesson>>(
                        future: contentRepo.getLessonsByModule(module.id),
                        builder: (context, lessonsSnapshot) {
                          final lessons = lessonsSnapshot.data ?? [];
                          
                          return Column(
                            children: lessons.map((lesson) => Container(
                              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: AppTheme.lightGray,
                                borderRadius: BorderRadius.circular(10),
                              ),
                              child: Row(
                                children: [
                                  Icon(
                                    Icons.article,
                                    color: AppTheme.primaryBlue,
                                    size: 18,
                                  ),
                                  const SizedBox(width: 12),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          lesson.title,
                                          style: const TextStyle(
                                            fontWeight: FontWeight.w600,
                                            color: AppTheme.darkGray,
                                          ),
                                        ),
                                        const SizedBox(height: 4),
                                        Text(
                                          '${lesson.estMins} minutes',
                                          style: TextStyle(
                                            fontSize: 13,
                                            color: AppTheme.neutralGray,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      IconButton(
                                        icon: Icon(
                                          Icons.edit,
                                          color: AppTheme.primaryBlue,
                                          size: 18,
                                        ),
                                        onPressed: () => _editLesson(context, lesson),
                                      ),
                                      IconButton(
                                        icon: Icon(
                                          Icons.delete,
                                          color: AppTheme.accentRed,
                                          size: 18,
                                        ),
                                        onPressed: () => _deleteLesson(context, ref, lesson),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            )).toList(),
                          );
                        },
                      ),
                    ],
                  ),
                );
              },
            );
          },
        );
      },
    );
  }

  void _editLesson(BuildContext context, Lesson lesson) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => LessonEditor(lesson: lesson, moduleId: lesson.moduleId),
      ),
    );
  }

  void _deleteLesson(BuildContext context, WidgetRef ref, Lesson lesson) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Lesson'),
        content: Text('Are you sure you want to delete "${lesson.title}"?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.of(context).pop();
              final contentRepo = ref.read(contentRepositoryProvider);
              await contentRepo.deleteLesson(lesson.id);
              ref.invalidate(contentRepositoryProvider);
            },
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }
}

class _QuizzesTab extends ConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final assessmentRepo = ref.watch(assessmentRepositoryProvider);
    
    return FutureBuilder<List<Assessment>>(
      future: _getAllQuizzes(assessmentRepo),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        final quizzes = snapshot.data ?? [];
        
        if (quizzes.isEmpty) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  padding: const EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    color: AppTheme.lightGray,
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Icon(
                    Icons.quiz,
                    size: 64,
                    color: AppTheme.neutralGray,
                  ),
                ),
                const SizedBox(height: 24),
                Text(
                  'No quizzes available',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.w600,
                    color: AppTheme.darkGray,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  'Create your first quiz to get started',
                  style: TextStyle(
                    color: AppTheme.neutralGray,
                    fontSize: 16,
                  ),
                ),
              ],
            ),
          );
        }
        
        return ListView.builder(
          padding: const EdgeInsets.all(16),
          itemCount: quizzes.length,
          itemBuilder: (context, index) {
            final quiz = quizzes[index];
            return Container(
              margin: const EdgeInsets.only(bottom: 12),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 10,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: ListTile(
                contentPadding: const EdgeInsets.all(16),
                leading: Container(
                  padding: const EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: AppTheme.accentGreen.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Icon(
                    Icons.quiz,
                    color: AppTheme.accentGreen,
                    size: 20,
                  ),
                ),
                title: Text(
                  'Quiz ${index + 1}',
                  style: const TextStyle(
                    fontWeight: FontWeight.w600,
                    color: AppTheme.darkGray,
                  ),
                ),
                subtitle: Text(
                  '${quiz.items.length} questions',
                  style: TextStyle(
                    color: AppTheme.neutralGray,
                  ),
                ),
                trailing: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    IconButton(
                      icon: Icon(
                        Icons.edit,
                        color: AppTheme.primaryBlue,
                        size: 18,
                      ),
                      onPressed: () => _editQuiz(context, quiz),
                    ),
                    IconButton(
                      icon: Icon(
                        Icons.delete,
                        color: AppTheme.accentRed,
                        size: 18,
                      ),
                      onPressed: () => _deleteQuiz(context, ref, quiz),
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }

  Future<List<Assessment>> _getAllQuizzes(AssessmentRepository assessmentRepo) async {
    // For demo purposes, return sample quizzes
    return [
      Assessment(
        id: 'quiz-1',
        lessonId: 'lesson-1',
        type: AssessmentType.quiz,
        items: [
          Question(
            id: 'q1',
            text: 'What is the basic unit of life?',
            choices: ['Cell', 'Atom', 'Molecule', 'Organ'],
            correctIndex: 0,
          ),
          Question(
            id: 'q2',
            text: 'Which of the following is NOT a characteristic of living things?',
            choices: ['Growth', 'Reproduction', 'Photosynthesis', 'Movement'],
            correctIndex: 2,
          ),
        ],
      ),
      Assessment(
        id: 'quiz-2',
        lessonId: 'lesson-2',
        type: AssessmentType.quiz,
        items: [
          Question(
            id: 'q3',
            text: 'What is an ecosystem?',
            choices: ['A community of living organisms', 'A type of plant', 'A weather pattern', 'A geological formation'],
            correctIndex: 0,
          ),
        ],
      ),
    ];
  }

  void _editQuiz(BuildContext context, Assessment quiz) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        child: Container(
          width: double.maxFinite,
          height: MediaQuery.of(context).size.height * 0.8,
          padding: const EdgeInsets.all(16),
          child: QuizEditor(
            assessment: quiz,
            lessonId: quiz.lessonId ?? 'default-lesson',
          ),
        ),
      ),
    );
  }

  void _deleteQuiz(BuildContext context, WidgetRef ref, Assessment quiz) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Quiz'),
        content: const Text('Are you sure you want to delete this quiz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.of(context).pop();
              final assessmentRepo = ref.read(assessmentRepositoryProvider);
              await assessmentRepo.deleteAssessment(quiz.id);
              ref.invalidate(assessmentRepositoryProvider);
            },
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }
} 